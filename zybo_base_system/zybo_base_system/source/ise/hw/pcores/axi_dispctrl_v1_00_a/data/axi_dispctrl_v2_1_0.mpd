###################################################################
##
## Name     : axi_dispctrl
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN axi_dispctrl

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION HDL = MIXED
OPTION IP_GROUP = MICROBLAZE:USER
OPTION DESC = AXI_DISPCTRL
OPTION ARCH_SUPPORT_MAP = (others=DEVELOPMENT)

IO_INTERFACE IO_IF = user_parameters

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE
BUS_INTERFACE BUS = S_AXIS_MM2S, BUS_STD = AXIS, BUS_TYPE = TARGET

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_ADDR_WIDTH = 32, DT = INTEGER, BUS = S_AXI, ASSIGNMENT = CONSTANT
PARAMETER C_S_AXI_MIN_SIZE = 0x000001ff, DT = std_logic_vector, BUS = S_AXI
PARAMETER C_USE_WSTRB = 0, DT = INTEGER
PARAMETER C_DPHASE_TIMEOUT = 8, DT = INTEGER
PARAMETER C_BASEADDR = 0xffffffff, DT = std_logic_vector, MIN_SIZE = 0x100, PAIR = C_HIGHADDR, ADDRESS = BASE, BUS = S_AXI
PARAMETER C_HIGHADDR = 0x00000000, DT = std_logic_vector, PAIR = C_BASEADDR, ADDRESS = HIGH, BUS = S_AXI
PARAMETER C_FAMILY = virtex6, DT = STRING
PARAMETER C_NUM_REG = 1, DT = INTEGER
PARAMETER C_NUM_MEM = 1, DT = INTEGER
PARAMETER C_SLV_AWIDTH = 32, DT = INTEGER
PARAMETER C_SLV_DWIDTH = 32, DT = INTEGER
PARAMETER C_S_AXI_PROTOCOL = AXI4LITE, TYPE = NON_HDL, ASSIGNMENT = CONSTANT, DT = STRING, BUS = S_AXI
PARAMETER C_S_AXIS_MM2S_PROTOCOL = XIL_AXI_STREAM_VID_DATA, DT = STRING, BUS = S_AXIS_MM2S, ASSIGNMENT = CONSTANT, TYPE = NON_HDL

PARAMETER C_USE_BUFR_DIV5 = 0, IO_IF = user_parameters, DT = INTEGER, VALUES = (1= TRUE, 0= FALSE), LONG_DESC="Select this option when connecting the VGA output to an HDMI transmitter. Routes the pixel clock on the BUFR network, and PXL_CLK_5X on the BUFIO network. Requires software set the MMCM output to 5x the desired pixel clock."
PARAMETER C_RED_WIDTH = 8, IO_IF = user_parameters, DT = INTEGER, RANGE = (1:8), LONG_DESC="Sets the width of the Red data output vector"
PARAMETER C_GREEN_WIDTH = 8, IO_IF = user_parameters, DT = INTEGER, RANGE = (1:8), LONG_DESC="Sets the width of the Green data output vector"
PARAMETER C_BLUE_WIDTH = 8, IO_IF = user_parameters, DT = INTEGER, RANGE = (1:8), LONG_DESC="Sets the width of the Blue data output vector"
PARAMETER C_S_AXIS_MM2S_TDATA_WIDTH = 32, IO_IF = user_parameters, DT = INTEGER, RANGE = (32), LONG_DESC="Sets the width of the AXI stream bus. Must be 32"

## Ports
PORT REF_CLK_I = "", DIR = I, SIGIS = CLK
PORT PXL_CLK_O = "", DIR = O, SIGIS = CLK
PORT PXL_CLK_5X_O = "", DIR = O, SIGIS = CLK
PORT LOCKED_O = "", DIR = O

PORT FSYNC_O = "", DIR = O

PORT HSYNC_O = "", DIR = O
PORT VSYNC_O = "", DIR = O
PORT DE_O = "", DIR = O
PORT RED_O = "", DIR = O, VEC = [(C_RED_WIDTH-1):0]
PORT GREEN_O = "", DIR = O, VEC = [(C_GREEN_WIDTH-1):0]
PORT BLUE_O = "", DIR = O, VEC = [(C_BLUE_WIDTH-1):0]

PORT DEBUG_O = "", DIR = O, VEC = [31:0]

PORT S_AXI_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXI
PORT S_AXI_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXI
PORT S_AXI_AWADDR = AWADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_AWVALID = AWVALID, DIR = I, BUS = S_AXI
PORT S_AXI_WDATA = WDATA, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WSTRB = WSTRB, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8)-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_WVALID = WVALID, DIR = I, BUS = S_AXI
PORT S_AXI_BREADY = BREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARADDR = ARADDR, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_ARVALID = ARVALID, DIR = I, BUS = S_AXI
PORT S_AXI_RREADY = RREADY, DIR = I, BUS = S_AXI
PORT S_AXI_ARREADY = ARREADY, DIR = O, BUS = S_AXI
PORT S_AXI_RDATA = RDATA, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0], ENDIAN = LITTLE, BUS = S_AXI
PORT S_AXI_RRESP = RRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_RVALID = RVALID, DIR = O, BUS = S_AXI
PORT S_AXI_WREADY = WREADY, DIR = O, BUS = S_AXI
PORT S_AXI_BRESP = BRESP, DIR = O, VEC = [1:0], BUS = S_AXI
PORT S_AXI_BVALID = BVALID, DIR = O, BUS = S_AXI
PORT S_AXI_AWREADY = AWREADY, DIR = O, BUS = S_AXI

PORT S_AXIS_TREADY = tready, DIR = O, BUS = S_AXIS_MM2S
PORT S_AXIS_ACLK = "", DIR = I, SIGIS = CLK, BUS = S_AXIS_MM2S  #not used
PORT S_AXIS_ARESETN = ARESETN, DIR = I, SIGIS = RST, BUS = S_AXIS_MM2S, INITIALVAL = VCC   #not used
PORT S_AXIS_TDATA = tdata, DIR = I, BUS = S_AXIS_MM2S, VEC = [(C_S_AXIS_MM2S_TDATA_WIDTH-1):0]
PORT S_AXIS_TVALID = tvalid, DIR = I, BUS = S_AXIS_MM2S
PORT S_AXIS_TLAST = tlast, DIR = I, BUS = S_AXIS_MM2S  #not used
PORT S_AXIS_TSTRB = TKEEP, DIR = I, VEC = [(C_S_AXIS_MM2S_TDATA_WIDTH/8)-1:0], BUS = S_AXIS_MM2S #not used

END
